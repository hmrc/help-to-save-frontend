# Copyright 2017 HM Revenue & Customs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

include "common.conf"

appName = "help-to-save-frontend"
application.router = prod.Routes

application.global = uk.gov.hmrc.helptosavefrontend.config.FrontendGlobal

play.ws.ssl {
  # Default platform timeout is 60s which is fine as-is
  # timeout.request = 60s
  
  # Handles the server root CA cert list; used by the client to verify the server
  trustManager = {
    stores = [
      # Play seems to be loading default truststore without requiring any explicit config or password...
      #{
      # path: ${java.home}/lib/security/cacerts, # Default trust store
      # password = ${microservice.services.nsi.server.base64TruststorePassword}, # Default trust store password
      # }
      {
        data = ${microservice.services.nsi.server.base64Certificate}
      }

//      {
//        data = ${microservice.services.nsi.server.phase2.set2.base64Certificate}
//      }
//      {
//        data = ${microservice.services.nsi.server.phase2.set1.base64Certificate}
//      }
    ]
  }

  # Handles the client cert (PrivateKeyEntry consisting of 3 chained certs) as 
  # supplied by NS&I; used by the server to verify the client
  keyManager = {
    stores = [
      {
        type = ${microservice.services.nsi.client.base64KeystoreType}
        password = ${microservice.services.nsi.client.base64KeystorePassword}
        data = ${microservice.services.nsi.client.base64Keystore}
      }

//      {
//        type = ${microservice.services.nsi.client.base64KeystoreType}
//        password = ${microservice.services.nsi.client.phase2.set2.base64KeystorePassword}
//        data = ${microservice.services.nsi.client.phase2.set2.base64Keystore}
//      }
//      {
//        type = ${microservice.services.nsi.client.base64KeystoreType}
//        password = ${microservice.services.nsi.client.phase2.set1.base64KeystorePassword}
//        data = ${microservice.services.nsi.client.phase2.set1.base64Keystore}
//      }
    ]
  }

  debug = {
    certpath = true
    ocsp = true
    ssl = true
    sslctx = true
    defaultctx = true
    handshake = true
    verbose = true
    data = true
    keymanager = true
    trustmanager = true
  }
}

# prevent Play upgrades from tightening these on future upgrades
# TODO fix syntax and uncomment
#play.ws.ssl.disabledSignatureAlgorithms = "MD2, MD4, MD5"
#play.ws.ssl.disabledKeyAlgorithms = "DHE keySize < 2048, ECDH keySize < 2048, ECDHE keySize < 2048, RSA keySize < 2048, DSA keySize < 2048, EC keySize < 224"

# to learn why this was included: https://confluence.tools.tax.service.gov.uk/display/TEC/2016/03/14/Setting+Security+Headers+in+frontend+services
play.filters.headers.contentSecurityPolicy = "default-src 'self' 'unsafe-inline' localhost:9000 localhost:9032 localhost:9250 www.google-analytics.com data:"

# Play Modules
# ~~~~
# Additional play modules can be added here
play.modules.enabled += "com.kenshoo.play.metrics.PlayModule"
play.modules.enabled += "uk.gov.hmrc.helptosavefrontend.config.CustomWSConfigParserModule"
play.modules.enabled += "uk.gov.hmrc.helptosavefrontend.config.HealthCheckModule"

# Global request handler
# ~~~~
# Set to the object handler for migrated 2.3 services
play.http.requestHandler = "play.api.http.GlobalSettingsHttpRequestHandler"

controllers {
  controllers.Assets = {
    needsAuth = false
    needsLogging = false
    needsAuditing = false
  }
}

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!

# As we need to be compatable with other services that don't use this key we have removed it. Putting this back will cause login loops locally
play.filters.csrf.header.bypassHeaders {
  X-Requested-With = "*"
  Csrf-Token = "nocheck"
}

feature-toggles {
  create-account-json-validation {
    enabled = true
  }

  log-account-creation-json {
    enabled = false
  }
}

email-validation {
  # the maximum total length of an email address
  max-total-length = 254

  # the maximum length of the local part of email address
  max-local-length = 64

  # the maximum length of the domain part of email address
  max-domain-length = 252
}

schema = """
{
  "$schema": "http://json-schema.org/schema#",
  "description": "A JSON schema to validate JSON as described in PPM-30048-UEM009-ICD001-HTS-HMRC-Interfaces v2.0.docx",

  "type" : "object",
  "additionalProperties": false,
  "required": ["forename", "surname", "dateOfBirth", "contactDetails", "registrationChannel", "nino"],
  "properties" : {
    "forename" : {
      "type" : "string",
      "minLength": 1,
      "maxLength": 26
    },
    "surname": {
      "type": "string",
      "minLength": 1,
      "maxLength": 300
    },
    "dateOfBirth": {
      "type": "string",
      "minLength": 8,
      "maxLength": 8,
      "pattern": "^[0-9]{4}(01|02|03|04|05|06|07|08|09|10|11|12)[0-9]{2}$"
    },
    "contactDetails": {
      "type": "object",
      "additionalProperties": false,
      "required": ["address1", "address2", "postcode", "communicationPreference"],
      "properties": {
        "countryCode": {
          "type": "string",
          "minLength": 2,
          "maxLength": 2,
          "pattern": "[A-Z][A-Z]"
        },
        "address1": {
          "type": "string",
          "maxLength": 35
        },
        "address2": {
          "type": "string",
          "maxLength": 35
        },
        "address3": {
          "type": "string",
          "maxLength": 35
        },
        "address4": {
          "type": "string",
          "maxLength": 35
        },
        "address5": {
          "type": "string",
          "maxLength": 35
        },
        "postcode": {
          "type": "string",
          "maxLength": 10
        },
        "communicationPreference": {
          "type": "string",
          "minLength": 2,
          "maxLength": 2,
          "pattern": "00|02"
        },
        "phoneNumber": {
          "type": "string",
          "maxLength": 15
        },
        "email": {
          "type": "string",
          "maxLength": """${email-validation.max-total-length}""",
          "pattern": "^.{1,"""${email-validation.max-local-length}"""}@.{1,"""${email-validation.max-domain-length}"""}$"
        }
      }
    },
    "registrationChannel": {
      "type": "string",
      "maxLength": 10,
      "pattern": "^online$|^callCentre$"
    },
    "nino" : {
      "type" : "string",
      "minLength": 9,
      "maxLength": 9,
      "pattern": "^(([A-CEGHJ-PR-TW-Z][A-CEGHJ-NPR-TW-Z])([0-9]{2})([0-9]{2})([0-9]{2})([A-D]{1})|((XX)(99)(99)(99)(X)))$"
    }
  }
}
"""

microservice {
  metrics {
    graphite {
      host = localhost
      port = 2003
      prefix = play.${appName}.
      enabled = false
    }
  }

  services {

    auth {
      host = localhost
      port = 8500
    }

    company-auth-frontend {
      url = "http://localhost:9025/gg"
    }

    contact-frontend {
      url = "http://localhost:9250"
    }

    //using the stub in local and dev environments
    email-verification {
      host = localhost
      port = 7002
      linkTTLMinutes = 120
    }

    feedback-survey {
      url = "http://localhost:9514/feedback-survey"
    }

    help-to-save {
      host = localhost
      port = 7001
    }

    help-to-save-frontend {
      url = "http://localhost:7000/help-to-save"
    }

    identity-verification-uplift {
      url = "http://localhost:9948/mdtp"
    }

    identity-verification-journey-result {
      host = localhost
      port = 9938
    }

    keystore {
      host = localhost
      port = 8400
      domain = keystore
      session-key = htsSession
    }

    nsi {
      host = localhost
      port = 7002
      manage-account {
        url = "https://nsandi.com"
      }
        client {
          base64KeystoreType = "jks"
          base64KeystorePassword = ""
          base64Keystore = ""

          phase2{
            set1 {
              base64KeystorePassword = ""
              base64Keystore = ""
            }
            set2 {
              base64KeystorePassword = ""
              base64Keystore = ""
            }
          }

          httpheader {
            basicauth {
              Base64User = "dXNlcm5hbWU=" //username
              Base64Password = "cGFzc3dvcmQ=" //password
            }
            header-key = "Authorization-test"
            encoding = "UTF-8"
          }
        }
        server {
          base64Certificate = ""
          base64TruststorePassword = ""

          phase2{
            set1 {
              base64Certificate = ""
              base64TruststorePassword = ""
            }
            set2 {
              base64Certificate = ""
              base64TruststorePassword = ""
            }
          }
        }
    }

  }

}

metrics {
  name = ${appName}
  rateUnit = SECONDS
  durationUnit = NANOSECONDS
  showSamples = true
  jvm = true
  enabled = true
}

auditing {
  enabled = true
  consumer {
    baseUri {
      host = localhost
      port = 8100
    }
  }
}

google-analytics {
  token = "UA-43414424-32"
  host = auto
}

assets {
  version = "3.0.1"
  version = ${?ASSETS_FRONTEND_VERSION}
  url = "http://localhost:9032/assets/"
}

proxy {
  proxyRequiredForThisEnvironment = false
  username = username
  password = password
  protocol = http
  host = localhost
  port = 3128
}

mongodb {
  uri = "mongodb://localhost:27017/help-to-save"
}

# must be a Base64 encoded string of 128/192/256 bits
crypto.encryption-key = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="


health {

  nsi-connection {
    enabled = true
    poll-period = 3 minutes
    minimum-poll-period = 1 minute
    # MDTP platform default timeout is 60s, NS&I JBoss/FUSE is 40s, NS&I Thaler db is 29s
    # The health check timeout will therefore be set between the first two, i.e. 50s to allow
    # the timeout source to be identified
    poll-timeout = 50 seconds
    poll-count-between-updates = 20
    poll-count-failures-to-alert = 3
    poll-count-between-pager-duty-alerts = 20
    # in order to make sure that only one health check is running across the different instances
    # of this application in each environment a lock needs to be acquired before the health check
    # will start. This parameter controls how long this lock is valid for and when the health check
    # will try to acquire the lock again
    lock-duration = 65 minutes
  }

}

# a list of IP's to whitelist. If this list is empty, no filtering is
# performed. The IP address is looked for in the HTTP header of requests
# 'true client IP'
http-header-ip-whitelist = [ ]
